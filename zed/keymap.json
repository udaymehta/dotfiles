// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  // Bindings for Normal and Visual modes
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // --- Vim-Style Search with * and # ---
      "*": "editor::SelectNext",
      "#": "editor::SelectPrevious",

      // Git
      "space g h d": "editor::ToggleSelectedDiffHunks",
      "space g s": "git_panel::ToggleFocus",

      // Toggles
      "space t i": "editor::ToggleInlayHints",
      "space u w": "editor::ToggleSoftWrap", // "u" for UI
      "space c z": "workspace::ToggleCenteredLayout",

      // Markdown
      "space m p": "markdown::OpenPreview",
      "space m P": "markdown::OpenPreviewToTheSide",

      // File & Project
      "space f p": "projects::OpenRecent",
      "space f f": "file_finder::Toggle",
      "space space": "file_finder::Toggle", // Alias for file finder
      "space f t": "workspace::OpenInTerminal",
      "space p": "project_panel::ToggleFocus",

      // Editor Actions
      "g f": "editor::OpenExcerpts",
      "K": "editor::MoveLineUp", // Move selected lines up
      "J": "editor::MoveLineDown", // Move selected lines down
      "space d l": "editor::DuplicateLineDown"
    }
  },
  // Bindings for Normal mode only
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // Pane Navigation
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",

      // --- Fast Pane/Window Management ---
      "space w v": "pane::SplitRight",
      "space w s": "pane::SplitDown",
      "space w =": "vim::ResetPaneSizes",

      // LSP & Diagnostics
      "space c a": "editor::ToggleCodeActions",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",
      "space x x": "diagnostics::Deploy", // Show diagnostics panel

      // Hunk Navigation
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPreviousHunk",

      // Tab / Item Navigation
      "shift-h": "pane::ActivatePreviousItem",
      "shift-l": "pane::ActivateNextItem",

      // Close Item / Buffer
      "space q": "pane::CloseActiveItem",
      "space b d": "pane::CloseActiveItem", // "b" for buffer, "d" for delete
      "space b o": "pane::CloseInactiveItems",

      // Workspace & Search
      "ctrl-s": "workspace::Save",
      "space s": "pane::DeploySearch", // Search in current file
      "space e": "pane::RevealInProjectPanel"
    }
  },
  // Bindings for Visual mode
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      "g c": "editor::ToggleComments"
    }
  },
  // Bindings for Insert mode
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "j j": "vim::NormalBefore", // Remap 'jj' to Escape
      "j k": "vim::NormalBefore" // Remap 'jk' to Escape
    }
  },
  // Custom operators
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine", // Make 'cc' change the current line
      "r": "editor::Rename" // Create a 'cr' operator for rename
    }
  },
  // Global workspace bindings
  {
    "context": "Workspace",
    "bindings": {
      "space t e": "terminal_panel::ToggleFocus",
      "space c b": "workspace::ToggleBottomDock",
      "space c r": "workspace::ToggleRightDock",
      "space c l": "workspace::ToggleLeftDock"
    }
  },
  // Terminal-specific bindings
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-l": "terminal::Clear"
    }
  },
  // File panel (netrw style) bindings
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      "q": "workspace::ToggleLeftDock", // 'q' to quit/close the panel
      "space e": "workspace::ToggleLeftDock", // Consistent with 'space e' in editor
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  // Standard Vim pane navigation
  {
    "context": "Dock",
    "bindings": {
      "ctrl-w h": "workspace::ActivatePaneLeft",
      "ctrl-w l": "workspace::ActivatePaneRight",
      "ctrl-w k": "workspace::ActivatePaneUp",
      "ctrl-w j": "workspace::ActivatePaneDown"
    }
  }
]
